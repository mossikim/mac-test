name: Run PNG Parser

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 수동 실행 가능

jobs:
  run-png-parser:
    runs-on: macos-latest  # macOS ARM64 환경
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: List files
      run: |
        ls -la
        file png-parser 2>/dev/null || echo "png-parser not found"
        file *.png 2>/dev/null || echo "No PNG files found"
    
    - name: Make binary executable
      run: |
        chmod +x png-parser
    
    - name: Check binary architecture
      run: |
        file png-parser
        otool -h png-parser
    
    - name: Create test PNG if not exists
      run: |
        if [ ! -f "correct_flag.png" ]; then
          python3 << 'EOF'
import struct
import zlib

def create_correct_png():
    # PNG signature
    png_signature = b'\x89\x50\x4e\x47\x0d\x0a\x1a\x0a'
    
    # IHDR chunk (minimal 1x1 pixel image)
    ihdr_data = struct.pack('>IIBBBBB', 1, 1, 8, 2, 0, 0, 0)
    ihdr_crc = zlib.crc32(b'IHDR' + ihdr_data) & 0xffffffff
    ihdr_chunk = struct.pack('>I', 13) + b'IHDR' + ihdr_data + struct.pack('>I', ihdr_crc)
    
    # The correct values for the 1dnh chunk
    expected_after_swap = [0x43bb9353, 0xe22decb0, 0x5add9d5d, 0x6e0e24d8, 0x400e53ce, 0xc5edabb3]
    
    # Reverse the byte swap to get original values
    original_values = []
    for val in expected_after_swap:
        swapped = struct.unpack('<I', struct.pack('>I', val))[0]
        original_values.append(swapped)
    
    chunk_data = struct.pack('<6I', *original_values)
    chunk_type = b'1dnh'
    chunk_crc = zlib.crc32(chunk_type + chunk_data) & 0xffffffff
    custom_chunk = struct.pack('>I', len(chunk_data)) + chunk_type + chunk_data + struct.pack('>I', chunk_crc)
    
    # Minimal IDAT chunk
    pixel_data = b'\x00\xff\x00\x00'
    compressed_data = zlib.compress(pixel_data)
    idat_crc = zlib.crc32(b'IDAT' + compressed_data) & 0xffffffff
    idat_chunk = struct.pack('>I', len(compressed_data)) + b'IDAT' + compressed_data + struct.pack('>I', idat_crc)
    
    # IEND chunk
    iend_crc = zlib.crc32(b'IEND') & 0xffffffff
    iend_chunk = struct.pack('>I', 0) + b'IEND' + struct.pack('>I', iend_crc)
    
    return png_signature + ihdr_chunk + custom_chunk + idat_chunk + iend_chunk

# Create the PNG
png_data = create_correct_png()
with open('correct_flag.png', 'wb') as f:
    f.write(png_data)
print(f"Created correct_flag.png ({len(png_data)} bytes)")
EOF
        fi
    
    - name: Run PNG parser with different PNG files
      run: |
        echo "=== Running with correct_flag.png ==="
        ./png-parser correct_flag.png 2>&1 || echo "Exit code: $?"
        
        echo -e "\n=== Trying with any existing PNG files ==="
        for png_file in *.png; do
          if [ -f "$png_file" ]; then
            echo "Testing $png_file:"
            ./png-parser "$png_file" 2>&1 || echo "Exit code: $?"
            echo "---"
          fi
        done
    
    - name: Debug - Check what PNG files were created
      run: |
        ls -la *.png 2>/dev/null || echo "No PNG files found"
        for png_file in *.png; do
          if [ -f "$png_file" ]; then
            echo "File: $png_file"
            xxd "$png_file" | head -10
            echo "---"
          fi
        done
    
    - name: Try running with no arguments to see usage
      run: |
        echo "=== Running with no arguments ==="
        ./png-parser 2>&1 || echo "Exit code: $?"
